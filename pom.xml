<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
<!--    <parent>-->
<!--        <groupId>org.springframework.boot</groupId>-->
<!--        <artifactId>spring-boot-starter-parent</artifactId>-->
<!--        <version>2.6.2</version>-->
<!--        <relativePath/> &lt;!&ndash; lookup parent from repository &ndash;&gt;-->
<!--    </parent>-->
    <parent>
        <artifactId>044-springboot-dubbo-ssm-parent</artifactId>
        <groupId>com.frank.springboot</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../044-springboot-dubbo-ssm-parent/pom.xml</relativePath>
    </parent>

<!--    <groupId>com.frank.springboot</groupId>-->
    <artifactId>046-springboot-dubbo-ssm-provider</artifactId>
<!--    <version>0.0.1-SNAPSHOT</version>-->
    <version>v1.0</version>

    <name>046-springboot-dubbo-ssm-provider</name>
    <description>Demo project for Spring Boot</description>

    <properties>
<!--        <java.version>1.8</java.version>-->
        <!--2022-03-15由于我这里是用手动创建的dockerfile，编辑配置时就指定了镜像名，
        没有用到docker的maven插件，所以实际上没用到这个前缀，因此虽然包含了大写字母，但构建时没报错-->
<!--        <docker.image.prefix>MicroServiceDockerDemo</docker.image.prefix>-->
<!--        <docker.image.prefix>frankyang1988</docker.image.prefix>&lt;!&ndash;2022-03-15前缀换成我dockerhub的仓库名，必须加这个前缀才能push成功&ndash;&gt;-->
    </properties>


    <dependencies>
        <!--
            需要这几个依赖：dubbo,zk,redis,mybatis,mysql,接口工程
        -->
        <!--springboot框架web项目起步依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--Dubbo集成springboot框架起步依赖-->
        <dependency>
            <groupId>com.alibaba.spring.boot</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
        </dependency>

        <!--zk注册中心-->
        <dependency>
            <groupId>com.101tec</groupId>
            <artifactId>zkclient</artifactId>
        </dependency>

        <!--mysql驱动-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!--mybatis集成springboot框架的起步依赖 -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <!--<version>2.2.0</version>-->
        </dependency>

        <!--springboot集成redis起步依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!--接口工程，注意：我们自己创建java工程的版本号不需要自定义父工程去管理，只管理第三方依赖的版本。-->
        <dependency>
            <groupId>com.frank.springboot</groupId>
            <artifactId>045-springboot-dubbo-ssm-interface</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!--logback日志框架依赖lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!--springboot集成redis起步依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.amqp</groupId>
            <artifactId>spring-rabbit</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!--逆向工程代码自动生成插件-->
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.6</version>
                <configuration>
                    <!--配置文件位置-->
                    <configurationFile>GeneratorDao.xml</configurationFile>
                    <verbose>true</verbose>
                    <overwrite>true</overwrite>
                </configuration>
            </plugin>

<!--            <plugin>-->
<!--                &lt;!&ndash;2022-03-07 Docker集成maven插件，自动生成DockerFile，打包成docker镜像 &ndash;&gt;-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>1.0.0</version>-->

<!--                <configuration>-->
<!--                    &lt;!&ndash;镜像名称：MicroServiceDockerDemo/046-springboot-dubbo-ssm-provider&ndash;&gt;-->
<!--                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>-->
<!--                    &lt;!&ndash;指定标签&ndash;&gt;-->
<!--                    <imageTags>-->
<!--                        <imageTag>${project.version}</imageTag>-->
<!--                    </imageTags>-->
<!--                    &lt;!&ndash;基础镜像jdk1.8&ndash;&gt;-->
<!--&lt;!&ndash;                    <baseImage>java</baseImage>&ndash;&gt;-->
<!--&lt;!&ndash;                    &lt;!&ndash;制作者提供本人信息&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;                    <maintainer>yangkun yangkun@sefon.com</maintainer>&ndash;&gt;-->
<!--&lt;!&ndash;                    &lt;!&ndash;切换到ROOT目录&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;                    <workdir>/ROOT</workdir>&ndash;&gt;-->
<!--&lt;!&ndash;                    <cmd>["java","-version"]</cmd>&ndash;&gt;-->
<!--&lt;!&ndash;                    <entryPoint>["java","-jar","${project.build.finalName}.jar"]</entryPoint>&ndash;&gt;-->

<!--                    &lt;!&ndash;指定Dockerfile路径（没用它)&ndash;&gt;-->
<!--&lt;!&ndash;                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>&ndash;&gt;&lt;!&ndash;构建失败，找不到文件&ndash;&gt;-->
<!--&lt;!&ndash;                    <dockerDirectory>/src/main/docker</dockerDirectory>&ndash;&gt;&lt;!&ndash;构建失败，找不到文件&ndash;&gt;-->
<!--                    <dockerDirectory></dockerDirectory> &lt;!&ndash;dockerfile放到项目根目录就不用指定了&ndash;&gt;-->

<!--                    &lt;!&ndash;指定远程docker api地址，把镜像上传到这个服务器&ndash;&gt;-->
<!--                    <dockerHost>http://131.10.10.73:2375</dockerHost> &lt;!&ndash;必须指定远程端口2375，提前打开远程docker服务器的此端口&ndash;&gt;-->

<!--                    &lt;!&ndash;复制jar包到docker容器指定的目录配置&ndash;&gt;-->
<!--                    <resources>-->
<!--                        <resource>-->
<!--                            <targetPath>/</targetPath> &lt;!&ndash;/ROOT是什么目录？&ndash;&gt;-->
<!--                            &lt;!&ndash;用于指定需要复制的根目录，${project.build.directory}表示target目录&ndash;&gt;-->
<!--                            <directory>${project.build.directory}</directory>-->
<!--                            &lt;!&ndash;用于指定需要复制的文件，${project.build.finalName}.jar，打包后的jar文件&ndash;&gt;-->
<!--                            <include>${project.build.finalName}.jar</include>-->
<!--                        </resource>-->
<!--                    </resources>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>
